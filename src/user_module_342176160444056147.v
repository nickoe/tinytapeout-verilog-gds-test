// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : b4bb7aa7
// Date       : 2022-09-07 22:53:40
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module user_module_342176160444056147 (
	output wire sim_trace,
	input  wire sys_clk,
	input  wire sys_rst,
	output reg  user_led0,
	output reg  user_led1,
	output reg  user_led2,
	output reg  user_led3,
	output reg  user_led4,
	output reg  user_led5,
	output reg  user_led6
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg  int_rst = 1'd1;
reg  [6:0] storage = 7'd0;
reg  re = 1'd0;
reg  [6:0] chaser = 7'd0;
reg  mode = 1'd0;
wire wait_1;
wire done;
reg  [16:0] count = 17'd71428;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sim_trace = 1'd1;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
assign wait_1 = (~done);
always @(*) begin
	user_led5 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led6 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led0 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led1 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led2 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led3 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
always @(*) begin
	user_led4 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
assign done = (count == 1'd0);


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= sys_rst;
end

always @(posedge sys_clk_1) begin
	if (done) begin
		chaser <= {chaser, (~chaser[6])};
	end
	if (re) begin
		mode <= 1'd1;
	end
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 17'd71428;
	end
	if (sys_rst_1) begin
		chaser <= 7'd0;
		mode <= 1'd0;
		count <= 17'd71428;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-09-07 22:53:40.
//------------------------------------------------------------------------------
